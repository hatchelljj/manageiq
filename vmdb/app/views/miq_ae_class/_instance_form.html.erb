<% url = url_for(:action => 'form_instance_field_changed',
                 :id     => "#{@ae_inst.id || "new"}")
%>
  <p class="lead">Main Info</p>
  <table class="table table-striped">
    <tr>
      <td >
        <%= Dictionary::gettext('fqname',
                                :type     => :column,
                                :notfound => :titleize)
        %>
      </td>
      <td ><%= h(@sb[:namespace_path]) %></td>
    </tr>
    <tr>
      <td >Name</td>
      <td >
        <%= text_field_tag("#{prefix}inst_name",
                           @edit[:new][:ae_inst]["name"],
                           :maxlength         => MAX_NAME_LEN,
                           "data-miq_observe" => {:interval => '.5',
                                                  :url      => url}.to_json)
        %>
        <%= javascript_tag("$j('##{prefix}inst_name').focus()") %>
       </td>
    </tr>
    <tr>
      <td >Display Name</td>
      <td >
        <%= text_field_tag("#{prefix}inst_display_name",
                           @edit[:new][:ae_inst]["display_name"],
                           :maxlength         => MAX_NAME_LEN,
                           "data-miq_observe" => {:interval => '.5', 
                                                  :url      => url}.to_json)
        %>
      </td>
    </tr>
    <tr>
      <td >Description</td>
      <td >
        <%= text_field_tag("#{prefix}inst_description",
                           @edit[:new][:ae_inst]["description"],
                           :maxlength         => MAX_NAME_LEN,
                           "data-miq_observe" => {:interval => '.5',
                                                  :url      => url}.to_json)
        %>
      </td>
    </tr>
  </table>
  <hr>
  <p class="lead">Fields</p>
  <table class="table table-striped" cellspacing="1">
    <thead>
      <tr>
        <th>Name</th>
        <th>Value</th>
        <th>On Entry</th>
        <th>On Exit</th>
        <th>On Error</th>
        <th>Collect</th>
      </tr>
    </thead>
    <tbody>
      <% @edit[:new][:ae_values].each_with_index do |flds,i| %>
        <tr>
          <% image = @edit[:new][:ae_fields][i]["substitute"] ? "passed.png" : "failed.png" %>
          <td>
            <img src="/images/icons/new/ae_<%= @edit[:new][:ae_fields][i]["aetype"] %>.png" alt="Type: <%= @edit[:new][:ae_fields][i]["aetype"] %>" title="Type: <%= @edit[:new][:ae_fields][i]["aetype"] %>" />
            <% if !@edit[:new][:ae_fields][i]["datatype"].blank? && @edit[:new][:ae_fields][i]["datatype"] != "string" %>
              <img src="/images/icons/new/<%= @edit[:new][:ae_fields][i]["datatype"] %>.png" alt="Data Type: <%= @edit[:new][:ae_fields][i]["datatype"] %>" title="Data Type: <%= @edit[:new][:ae_fields][i]["datatype"] %>" />
            <% end %>
            <img src="/images/icons/16/<%= image %> " alt="Substitution: <%= @edit[:new][:ae_fields][i]["substitute"] %>" title="Substitution: <%= @edit[:new][:ae_fields][i]["substitute"] %>" />&nbsp;
            <%= h(@edit[:new][:ae_fields][i]["display_name"]) %> (<%= h(@edit[:new][:ae_fields][i]["name"]) %>)
          </td>
          <td>
            <% default_value = @edit[:new][:ae_fields][i]["default_value"] %>
            <% cls = flds["value"].blank? && !default_value.blank? ? "input_def_val" : "" %>
            <% if @edit[:new][:ae_fields][i]["datatype"] == "password" %>
              <%= password_field_tag("#{prefix}inst_password_value_#{i}",
                                     flds["value"].blank? ? default_value : flds["value"],
                                     :class  => cls,
                                     :onBlur =>"miqSetInputValues(this, 'blur')",
                                     #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                                     "data-miq_default_value" => default_value,
                                     "data-miq_observe"       => {:interval => '.5', 
                                                                  :url      => url}.to_json)
              %>
            <% else %>
              <%= text_field_tag("#{prefix}inst_value_#{i}",
                                 flds["value"].blank? ? default_value : flds["value"],
                                 :class  => cls,
                                 :onBlur => "miqSetInputValues(this, 'blur')",
                                 #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                                 "data-miq_default_value" => default_value,
                                 "data-miq_observe"       => {:interval => '.5',
                                                              :url      => url}.to_json)
              %>
            <% end %>
          </td>
          <td>
            <% default_value = @edit[:new][:ae_fields][i]["on_entry"] %>
            <% cls = flds["on_entry"].blank? && !default_value.blank? ? "input_def_val" : "" %>
            <%= text_field_tag("#{prefix}inst_on_entry_#{i}",
                               flds["on_entry"].blank? ? default_value : flds["on_entry"],
                               :class => cls,
                               :onBlur => "miqSetInputValues(this, 'blur')",
                               #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                               "data-miq_default_value" => default_value,
                               "data-miq_observe" => {:interval => '.5',
                                                      :url      => url}.to_json)
            %>
          </td>
          <td>
            <% default_value = @edit[:new][:ae_fields][i]["on_exit"] %>
            <% cls = flds["on_exit"].blank? && !default_value.blank? ? "input_def_val" : "" %>
            <%= text_field_tag("#{prefix}inst_on_exit_#{i}",
                               flds["on_exit"].blank? ? default_value : flds["on_exit"],
                               :class  => cls,
                               :onBlur =>"miqSetInputValues(this, 'blur')",
                               #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                               "data-miq_default_value" => default_value,
                               "data-miq_observe" => {:interval => '.5',
                                                      :url      => url}.to_json)
            %>
          </td>
          <td>
            <% default_value = @edit[:new][:ae_fields][i]["on_error"] %>
            <% cls = flds["on_error"].blank? && !default_value.blank? ? "input_def_val" : "" %>
            <%= text_field_tag("#{prefix}inst_on_error_#{i}",
                               flds["on_error"].blank? ? default_value : flds["on_error"],
                               :class  => cls,
                               :onBlur => "miqSetInputValues(this, 'blur')",
                               #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                               "data-miq_default_value" => default_value,
                               "data-miq_observe"       => {:interval => '.5',
                                                            :url      => url}.to_json)
            %>
          </td>
          <td>
            <% default_value = @edit[:new][:ae_fields][i]["collect"] %>
            <% cls = flds["collect"].blank? && !default_value.blank? ? "input_def_val" : "" %>
            <%= text_field_tag("#{prefix}inst_collect_#{i}",
                               flds["collect"].blank? ? default_value : flds["collect"],
                               :class  => cls,
                               :onBlur => "miqSetInputValues(this, 'blur')",
                               #:onFocus =>"miqSetInputValues(this, 'focus')",  # UJS binding will call this
                               "data-miq_default_value" => default_value,
                               "data-miq_observe"       => {:interval => '.5', 
                                                            :url      => url}.to_json)
            %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
